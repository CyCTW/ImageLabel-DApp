{"version":3,"sources":["getWeb3.js","components/wallet/Connectors.js","components/uploader/Uploader.js","components/labeler/Labeler.js","App.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","injected","InjectedConnector","supportedChainIds","client","create","Uploader","account","contract","useState","fileUrl","setFileUrl","price","setPrice","submitToContract","methods","uploadRawImage","send","from","value","utils","toWei","getNum","call","response","onUpload","e","file","target","files","add","added","url","path","onChange","type","src","width","m","onClick","Labeler","imgClass","setImgClass","reward","setReward","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","useRef","useEffect","getImageReward","res","fromWei","handleGetImage","getRandomImage","handleChange","imgcls","uploadLabeledImage","leastDestructiveRef","ref","colorScheme","App","useWeb3React","active","activate","library","connector","deactivate","ex","setWeb3","setContract","eth","net","getId","networkId","deployedNetwork","ImageLabelContract","networks","instance","Contract","abi","address","alert","error","handleGetSupply","getTotalSupply","supply","bg","p","mb","size","justify","variant","ReactDOM","render","getLibrary","document","getElementById"],"mappings":"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","file":"static/js/main.31d32268.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import { InjectedConnector } from '@web3-react/injected-connector'\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42, 1337],\n})","import React, { useEffect, useState } from 'react';\nimport { Button, Input, NumberInput, NumberInputField, Text } from '@chakra-ui/react'\nimport { create } from 'ipfs-http-client'\n\nconst client = create('https://ipfs.infura.io:5001/api/v0')\n\nfunction Uploader({web3, account, contract}) {\n    const [fileUrl, setFileUrl] = useState(``)\n    const [price, setPrice] = useState(`0.0005`)\n\n    const submitToContract = async () => {\n        await contract.methods.uploadRawImage(fileUrl).send({ from: account, value: web3.utils.toWei(price, \"ether\") });\n        // await contract.methods.set(5).send({ from: account });\n        const response = await contract.methods.getNum().call();\n        console.log(\"res:\", response)\n        setFileUrl('')\n    }\n\n    const onUpload = async (e) => {\n      const file = e.target.files[0];\n      try {\n        const added = await client.add(file)\n        const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n        setFileUrl(url);\n        \n      } catch (err) {\n        console.log('upload file err', err);\n      }\n      \n    }\n    const parse = (val) => val.replace('/ETH/i', '')\n\n    const handlePrice = (e) => {\n        const price = e.target.value\n        console.log(typeof(price))\n        setPrice(price);\n    }\n    const format = (val) => val + `ETH`\n    return (\n        <>\n            <Text>1. Input reward you want to pay to labeler in ETH</Text>\n            <Input  onChange={handlePrice}  value={price} />\n            <Text>1. Upload your unlabeled image</Text>\n            <input type=\"file\" onChange={onUpload}/>\n            {\n                fileUrl && (\n                    <>\n                    <img src={fileUrl} width=\"700px\"/>\n                    <Button m='3' onClick={submitToContract}>Upload</Button>\n                </>\n                )\n            }\n\n        </>\n    )\n}\nexport default Uploader;\n","import { AlertDialog, AlertDialogBody,AlertDialogHeader, AlertDialogContent, AlertDialogFooter, Button, Input, Text, useDisclosure, AlertDialogOverlay } from '@chakra-ui/react';\nimport React, { useEffect, useState } from 'react';\n\nfunction Labeler({web3, account, contract}) {\n    const [fileUrl, setFileUrl] = useState(\"\")\n    const [imgClass, setImgClass] = useState(\"\")\n    const [reward, setReward] = useState(0)\n    const [isImageExist, setIsImageExist] = useState(true)\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const cancelRef = React.useRef()\n    useEffect(async () => {\n        if (fileUrl !== \"\") {  \n            let res = await contract.methods.getImageReward(fileUrl).call();\n            res = web3.utils.fromWei(res, 'ether');\n            console.log(\"reward: \", res);\n            setReward(res);\n        }\n    }, [fileUrl])\n\n    const handleGetImage = async () => {\n        try {\n            const url = await contract.methods.getRandomImage().call();\n            console.log(\"url: \", url);\n            setFileUrl(url)\n        } catch (err) {\n            console.log(err);\n            console.log(\"hihi\")\n            onOpen();\n        }\n        \n    }\n\n    const handleChange = async (e) => {\n        const imgcls = e.target.value;\n        setImgClass(imgcls);\n    }\n\n    const submitToContract = async() => {\n        try {\n            await contract.methods.uploadLabeledImage(fileUrl, imgClass).send({ from: account });\n            console.log(\"success\")\n            setReward(0)\n            setFileUrl('')\n            setImgClass('')\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <>\n            <Button onClick={handleGetImage}>Get image</Button>\n            {\n                fileUrl && (<img src={fileUrl} width=\"500px\"/>)\n            }\n            <Text m='3'>1. Answer the Class of image to earn money!</Text>\n            <Text>Earn Reward: {reward} ether</Text>\n            <Input onChange={handleChange} value={imgClass}/>\n            <Button onClick={submitToContract}>Submit</Button>\n            <AlertDialog\n                isOpen={isOpen}\n                onClose={onClose}\n                leastDestructiveRef={cancelRef}\n            >\n                <AlertDialogOverlay>\n\n                <AlertDialogContent>\n                    <AlertDialogHeader>\n                        Warning\n                    </AlertDialogHeader>\n\n                    <AlertDialogBody>\n                        Currently there is no image in contract.\n                    </AlertDialogBody>\n                    <AlertDialogFooter>\n                        <Button ref={cancelRef} onClick={onClose} colorScheme='red'>\n                            Close\n                        </Button>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n                </AlertDialogOverlay>\n\n            </AlertDialog>\n\n        </>\n    )\n}\nexport default Labeler;\n","import React, { useEffect, useState } from 'react';\nimport getWeb3 from \"./getWeb3\";\n// import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport ImageLabelContract from \"./contracts/ImageLabel.json\";\nimport { useWeb3React } from \"@web3-react/core\"\nimport { injected } from \"./components/wallet/Connectors\"\nimport { Tabs, TabList, TabPanels, Tab, TabPanel, Button, Flex, Box, Heading, Spacer, Text } from '@chakra-ui/react'\nimport Uploader from './components/uploader/Uploader';\nimport Labeler from './components/labeler/Labeler';\n\n\nfunction App() {\n  const { active, account, library, connector, activate, deactivate } = useWeb3React()\n\n  async function connect() {\n    try {\n      await activate(injected)\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n  async function disconnect() {\n    try {\n      deactivate()\n    } catch (ex) {\n      console.log(ex)\n    }\n  }\n\n\n  const [accounts, setAccounts] = useState([]); // state variable to set account.\n  const [storageValue, setStorageValue] = useState(0);\n  const [web3, setWeb3] = useState(\"\");\n  const [contract, setContract] = useState(\"\");\n\n  // storageValue: 0, web3: null, accounts: null, contract: null\n  useEffect(async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      // const accounts = await web3.eth.getAccounts();\n      // console.log(web3)\n      // console.log(accounts)\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ImageLabelContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ImageLabelContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      console.log(instance)\n      console.log(deployedNetwork)\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.setState({ web3, accounts, contract: instance }, this.runExample);\n      setWeb3(web3);\n      // setAccounts(accounts);\n      setContract(instance);\n      // await instance.methods.set(5).send({ from: accounts[0] });\n      // const response = await contract.methods.get().call();\n      // setStorageValue(response);\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n   }, []);\n   \n\n\n   const handleGetSupply = async () => {\n    const supply = await contract.methods.getTotalSupply().call();\n    console.log(\"supply\", supply)\n   }\n   \n   return (\n     <>\n      <Flex bg='teal.500' p='3' mb='3'>\n        <Box>\n          :)\n        </Box>\n        <Spacer />\n        <Box p='2'>\n          <Heading size='md'>Image Labeling to Earn!</Heading>\n        </Box>\n        <Spacer />\n        <Box>\n          {\n          active ?<Button onClick={disconnect}>Disconnect</Button> : <Button onClick={connect}>Connect</Button>\n          }\n        </Box>\n      </Flex>\n\n      {active ? \n      <>\n      <Flex justify='center'>\n        <Tabs variant='soft-rounded' colorScheme='green'>\n        <Text m='3'>Hello, you connected with <b>{account}</b></Text> \n\n        <TabList>\n          <Tab>I am Image Uploader!</Tab>\n          <Tab>I am Image Labeler!</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Uploader \n              contract={contract}\n              web3={web3}\n              account={account}\n            />\n            <Button onClick={handleGetSupply}>Get supply</Button>\n          </TabPanel>\n          <TabPanel>\n            <Labeler \n              contract={contract}\n              web3={web3}\n              account={account}\n            />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n      </Flex>\n    </>\n      : \n      <Flex justify='center'>\n        <span>Please collect to wallet in Rospten Network</span>\n        </Flex>\n        \n      }\n    </>\n   );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Web3ReactProvider } from '@web3-react/core'\nimport Web3 from 'web3'\nimport { ChakraProvider } from '@chakra-ui/react'\n\nfunction getLibrary(provider) {\n  return new Web3(provider)\n}\n\nReactDOM.render(\n  <ChakraProvider>\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <App />\n    </Web3ReactProvider>\n  </ChakraProvider>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}